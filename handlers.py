from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler, MessageHandler, filters
from config import ADMIN_ID, logger, CHANNEL_USERNAME
import database
import keyboards

async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(
            chat_id=CHANNEL_USERNAME, 
            user_id=user_id
        )
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_subscription(user_id, context):
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n"
            f"üëâ {CHANNEL_USERNAME}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")]
            ])
        )
        return
    
    database.add_user(user_id)
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboards.main_menu_keyboard()
    )
    
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await update.message.reply_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "1. –§–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å (—Ñ–æ—Ä–º–∞—Ç –Ω–∏–∂–µ)\n"
        "2. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç (–∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)\n\n"
        "–§–æ—Ä–º–∞—Ç:\n"
        "–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–æ–∂–Ω–æ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏)\n"
        "===–ö–Ω–æ–ø–∫–∞===\n"
        "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏\n"
        "https://example.com\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞...\n"
        "===–ö–Ω–æ–ø–∫–∞===\n"
        "–ü–µ—Ä–µ–π—Ç–∏\n"
        "https://example.com"
    )

async def handle_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        return

    success = 0
    failed = []
    users = database.get_all_users()
    total_users = len(users)

    try:
        if update.message.photo:
            photo = update.message.photo[-1].file_id
            caption = update.message.caption

            if not caption or "===–ö–Ω–æ–ø–∫–∞===" not in caption:
                await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ===–ö–Ω–æ–ø–∫–∞===")
                return

            parts = caption.split("===–ö–Ω–æ–ø–∫–∞===")
            description = parts[0].strip()
            button_part = parts[1].strip().split('\n')

            if len(button_part) < 2:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏. –ù—É–∂–Ω–æ:\n–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏\nURL")
                return

            button_text = button_part[0].strip()
            button_url = button_part[1].strip()

            if not button_url.startswith(('http://', 'https://')):
                await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                return

            keyboard = [[InlineKeyboardButton(button_text, url=button_url)]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            for user in users:
                try:
                    await context.bot.send_photo(
                        chat_id=user,
                        photo=photo,
                        caption=description,
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                    success += 1
                except Exception as e:
                    failed.append(user)
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")

        else:
            text = update.message.text

            if not text or "===–ö–Ω–æ–ø–∫–∞===" not in text:
                await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ===–ö–Ω–æ–ø–∫–∞===")
                return

            parts = text.split("===–ö–Ω–æ–ø–∫–∞===")
            description = parts[0].strip()
            button_part = parts[1].strip().split('\n')

            if len(button_part) < 2:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏. –ù—É–∂–Ω–æ:\n–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏\nURL")
                return

            button_text = button_part[0].strip()
            button_url = button_part[1].strip()

            if not button_url.startswith(('http://', 'https://')):
                await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                return

            keyboard = [[InlineKeyboardButton(button_text, url=button_url)]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            for user in users:
                try:
                    await context.bot.send_message(
                        chat_id=user,
                        text=description,
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                    success += 1
                except Exception as e:
                    failed.append(user)
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")

        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {len(failed)}\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {round(success/total_users*100 if total_users > 0 else 0, 2)}%"
        )

        if failed:
            stats_message += f"\n\n–°–ø–∏—Å–æ–∫ ID, –∫–æ–º—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å:\n{', '.join(map(str, failed[:50]))}"
            if len(failed) > 50:
                stats_message += f"\n...–∏ –µ—â–µ {len(failed)-50} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=stats_message
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'start_bybit':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboards.bybit_menu_keyboard())
    elif query.data == 'bybit_referral':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboards.referral_menu_keyboard())
    elif query.data == 'main_learn':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboards.learn_menu_keyboard())
    elif query.data == 'learn_basics':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboards.basics_menu_keyboard())
    elif query.data == 'learn_spot':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboards.spot_menu_keyboard())
    elif query.data == 'learn_derivatives':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboards.derivatives_menu_keyboard())
    elif query.data == 'main_about':
        await query.edit_message_text(
            "ü§ñ **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥—É –Ω–∞ Bybit**\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –æ—Å–≤–æ–∏—Ç—å —Ç—Ä–µ–π–¥–∏–Ω–≥ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö, –Ω–æ –Ω–µ –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞—Ç—å –∑–∞ –∫—É—Ä—Å—ã –∏–ª–∏ –Ω–∞—Ä–≤–∞—Ç—å—Å—è –Ω–∞ '–≥—É—Ä—É', –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ –æ–±–µ—â–∞—é—Ç –∑–æ–ª–æ—Ç—ã–µ –≥–æ—Ä—ã, –∞ –Ω–∞ –¥–µ–ª–µ –¥–∞—é—Ç –≤–æ–¥—É.\n\n"
            "–Ø —Å–∞–º –∫–æ–≥–¥–∞-—Ç–æ –Ω–∞—á–∏–Ω–∞–ª —Å –Ω—É–ª—è –∏ –∑–Ω–∞—é, –∫–∞–∫ —Å–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ **—á–µ—Å—Ç–Ω—É—é –∏ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é** –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –í–æ–∫—Ä—É–≥ –æ–¥–Ω–∏ –ø–∏–∑–¥–∞–±–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∏–≤–∞—é—Ç—Å—è –Ω–∞ –Ω–æ–≤–∏—á–∫–∞—Ö. –ü–æ—ç—Ç–æ–º—É —è —Ä–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç ‚Äî —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ —É—á–∏—Ç—å—Å—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ç—Ä–∞—Ç –∏ –æ–±–º–∞–Ω–∞.\n\n"
            "### –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?\n"
            "‚úÖ **–û—Å–Ω–æ–≤—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞**: –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ Bybit –¥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –æ—Ä–¥–µ—Ä–æ–≤.\n"
            "‚úÖ **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏**: –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö.\n"
            "‚úÖ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏**: –∫–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–ø–æ–∑–∏—Ç –∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å —É–º–æ–º.\n"
            "‚úÖ **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞**: –∫–∞–∫ –Ω–µ –ø–æ–¥–¥–∞–≤–∞—Ç—å—Å—è —ç–º–æ—Ü–∏—è–º –∏ –Ω–µ —Å–ª–∏–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏.\n"
            "‚úÖ **–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã**: –æ–±–∑–æ—Ä—ã —Ä—ã–Ω–∫–∞, –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã.\n\n"
            "### –ü–æ—á–µ–º—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ?\n"
            "–ü–æ—Ç–æ–º—É —á—Ç–æ —è –≤–µ—Ä—é, —á—Ç–æ –∑–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –∫–∞–∂–¥–æ–º—É. –ù–µ –Ω—É–∂–Ω–æ –ø–ª–∞—Ç–∏—Ç—å —Ç—ã—Å—è—á–∏ –∑–∞ –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ. –ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∏—à—å –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.\n\n"
            "üöÄ **–¢–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å!**",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_back')]]),
            parse_mode="Markdown"
        )
    elif query.data == 'main_other':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboards.other_menu_keyboard())
    elif query.data == 'other_thanks':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboards.thanks_menu_keyboard())
    elif query.data == 'other_author':
        await query.edit_message_text(
            "–ê–≤—Ç–æ—Ä(–º–µ–Ω–µ–¥–∂–µ—Ä): @The_CardinaI\n\n"
            "–ü–∏—Å–∞—Ç—å –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_other')]])
        )
    elif query.data == 'other_ad':
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—É—é –æ–ø—Ü–∏—é:",
            reply_markup=keyboards.ad_menu_keyboard()
        )
    elif query.data == 'other_materials':
        books_list = """
üìö *–¢–æ–ø-10 –∫–Ω–∏–≥ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É:*

1. _¬´–¢—Ä–µ–π–¥–µ—Ä-–∏–Ω–≤–µ—Å—Ç–æ—Ä¬ª_ ‚Äî –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –≠–ª–¥–µ—Ä  
   –û—Å–Ω–æ–≤—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞.

2. _¬´–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä¬ª_ ‚Äî –ú–∞—Ä–∫ –î—É–≥–ª–∞—Å  
   –ö–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏.

3. _¬´–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤¬ª_ ‚Äî –î–∂–µ–∫ –®–≤–∞–≥–µ—Ä  
   –ö–ª–∞—Å—Å–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏.

4. _¬´–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–∏—Ä–∂–µ–≤–æ–≥–æ —Å–ø–µ–∫—É–ª—è–Ω—Ç–∞¬ª_ ‚Äî –≠–¥–≤–∏–Ω –õ–µ—Ñ–µ–≤—Ä  
   –§–∏–ª–æ—Å–æ—Ñ–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –æ—Ç –ª–µ–≥–µ–Ω–¥—ã.

5. _¬´–Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏¬ª_ ‚Äî –°—Ç–∏–≤ –ù–∏—Å–æ–Ω  
   –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–≤–µ—á–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º.

6. _¬´–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–π–¥–∏–Ω–≥¬ª_ ‚Äî –≠—Ä–Ω–µ—Å—Ç –ß–∞–Ω  
   –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è Quant-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞.

7. _¬´–ü—É—Ç—å —á–µ—Ä–µ–ø–∞—Ö¬ª_ ‚Äî –ö—É—Ä—Ç–∏—Å –§–µ–π—Å  
   –ò—Å—Ç–æ—Ä–∏—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞.

8. _¬´–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ —Ñ—å—é—á–µ—Ä—Å–∞–º¬ª_ ‚Äî –î–∂–µ–∫ –®–≤–∞–≥–µ—Ä  
   –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.

9. _¬´–ß–µ—Ä–Ω—ã–π –ª–µ–±–µ–¥—å¬ª_ ‚Äî –ù–∞—Å—Å–∏–º –¢–∞–ª–µ–±  
   –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏.

10. _¬´–°–≤–µ—Ä—Ö–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å¬ª_ ‚Äî –ê–Ω–¥—Ä–µ–∞—Å –ö–ª—ë–Ω–µ—Ä  
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    """
        await query.edit_message_text(
            books_list,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_other')]
            ]),
            parse_mode="Markdown"
        )
    elif query.data == 'rent_bot':
        await query.edit_message_text(
            "ü§ñ –£—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã –±–æ—Ç–∞:\n\n"
            "1. –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª\n"
            "2. –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
            "3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n"
            "4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–∫–∞–º\n\n"
            "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 5000 —Ä—É–±./–º–µ—Å—è—Ü\n\n"
            "üì© –î–ª—è –∑–∞–∫–∞–∑–∞: @The_CardinaI",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='other_ad')]
            ])
        )
    elif query.data == 'ad_mailing':
        try:
            await query.message.delete()
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=open('example.jpg', 'rb'),
                caption="""üéØ –ü—Ä–∏–º–µ—Ä —Ä–µ–∫–ª–∞–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏

–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üì¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!
üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–æ 15% –≤ –º–µ—Å—è—Ü
üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
‚è≥ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ú® –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è""",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üì© –ü–µ—Ä–µ–π—Ç–∏", url="https://t.me/The_CardinaI")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_ad_menu')]
                ]),
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    elif query.data == 'back_to_ad_menu':
        try:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—É—é –æ–ø—Ü–∏—é:",
                reply_markup=keyboards.ad_menu_keyboard()
            )
            await query.message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")

    elif query.data == 'main_back':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboards.main_menu_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if not await check_subscription(user_id, context):
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n"
            f"üëâ {CHANNEL_USERNAME}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")]
            ])
        )
        return
    
    
    
    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å (–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è) ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    await update.message.reply_text(
        "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é:",
        reply_markup=keyboards.main_menu_keyboard()
    )